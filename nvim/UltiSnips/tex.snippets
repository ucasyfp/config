# vim: foldmethod=marker foldlevel=0
# vim:ft=snippets
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

# paragraph, section, etc {{{1
snippet para "paragraph" b
\paragraph{$1}
$0
endsnippet

snippet "(s*)sec" "(sub)section" br
\\`!p snip.rv=len(match.group(1))*'sub'`section{$1}
$0
endsnippet

snippet ftn "footnote" iA
\footnote{$1}$0
endsnippet

snippet lab "label" w
\label{$1}$0
endsnippet

snippet r "reference" w
\ref{$1}$0
endsnippet

snippet adc "addcontents" w
\addcontentsline{toc}{section}{$1}
endsnippet

# }}}1
# Mostly used {{{1
snippet dm "Math" wA
\[
	${1:${VISUAL}}
\]$0
endsnippet

snippet mk "Math" wA
$${1}$$0
endsnippet

# snippet mk "Math" wA
# $${1}$`!p
# if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
# 	snip.rv = ' '
# else:
# 	snip.rv = ''
# `$2
# endsnippet

# }}}2
# templates {{{1
snippet subfile "as subfile" b
% !TEX program = xelatex
\documentclass[${1:../main.tex}]{subfiles}
\begin{document}
$0
\end{document}
endsnippet
snippet template2 "template 2" b
% !TEX program = xelatex
\documentclass[12pt,UTF8]{article}
\usepackage{ctex}
\usepackage[english]{babel} % 英文自动断字功能
\usepackage{longtable}
\usepackage[top=1in, bottom=1.25in, left=1.25in, right=1.25in,includefoot,heightrounded]{geometry}
% \usepackage{indentfirst}
\usepackage[utf8]{inputenc}
\usepackage{amsmath,amssymb,amsthm,mathrsfs,mathtools}
\usepackage{amsfonts}
\usepackage{newtxmath} % enable indicator funcion \vmathbb{1}
\usepackage{cancel} %in math environment to cancel items.
\usepackage{bm} %boldface math fonts
%\usepackage{enumitem} % To use colorful enum environment.

\usepackage{graphicx}
\usepackage{hyperref}
% \usepackage[document]{ragged2e}
\usepackage{fancyhdr} % provede "fancy" pagestyle to customize your own pagestyle, including pagehead and pagefoot
\usepackage{enumerate} % provide different labels for enumerating environment
\usepackage{listings} % inserting code block with corresponding syntax highlight
\usepackage{algpseudocode}
\usepackage{color}
\usepackage{flowchart}
\usepackage[most]{tcolorbox}


% New command for math
\newcommand\N{\ensuremath{\mathbb{N}}} % ensuremath doesn't require math environment.
\newcommand\R{\ensuremath{\mathbb{R}}}
\newcommand\Z{\ensuremath{\mathbb{Z}}}
\renewcommand\O{\ensuremath{\emptyset}}
\newcommand\Q{\ensuremath{\mathbb{Q}}}
\newcommand\C{\ensuremath{\mathbb{C}}}
\newcommand\D{\ensuremath{\mathbb{D}}}
%\newcommand\H{\ensuremath{\mathbb{H}}}
\newcommand\F{\ensuremath{\mathbb{F}}}
\newcommand*{\dif}{\mathop{}\!\mathrm{d}}
% Some math operator
\newcommand\E{\ensuremath{\mathbb{E}}}
\newcommand\Var{\mathrm{Var}}
\newcommand\Cov{\mathrm{Cov}}
\newcommand\tr{\mathrm{tr}}
\newcommand\Cor{\mathrm{Cor}}
% make sum subscript looks like \limits
\let\svlim\lim\def\lim{\svlim\limits}
\let\svlimsup\limsup\def\limsup{\svlimsup\limits}
\let\svliminf\liminf\def\liminf{\svliminf\limits}
\let\svsup\sup\def\sup{\svsup\limits}
\let\svinf\inf\def\inf{\svinf\limits}
\DeclareMathOperator*{\argmax}{argmax}
\DeclareMathOperator*{\argmin}{argmin}

% \usepackage{mdframed} % for boxed environment, the following newmdtheoremenv command relies on this.
% \mdfsetup{skipabove=1em,skipbelow=0em}
% Try to use tcolorbox
% Definition of kinds of thms, cors, boxed or not.
\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]
\newtheorem*{example}{Example}
\newtheorem*{notation}{Notation}
\newtheorem*{previouslyseen}{As previously seen}
\newtheorem*{note}{Note}
\newtheorem*{observe}{Observe}
\newtheorem*{property}{Property}
\newtheorem*{intuition}{Intuition}
\newtheorem*{problem}{Problem}
\newtheorem{exercise}{Exercise}

\theoremstyle{plain}
\newtheorem{theorem}{Theorem}[section]
\newtheorem*{theorem*}{Theorem}
\newtheorem{proposition}[theorem]{Proposition}
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{lemma}[theorem]{Lemma}


\theoremstyle{remark}
\newtheorem*{remark}{Remark}

\definecolor{browna}{rgb}{0.76,0.72,0.65}
\newtcbtheorem[no counter]{tcbthm}{Theorem}{
  enhanced,
  sharp corners,
  attach boxed title to top left={
    yshifttext=-1mm
  },
  colback=white,
  colframe=browna,
  fonttitle=\bfseries,
  boxed title style={
    sharp corners,
    size=small,
    colback=browna,
    colframe=browna,
  }
}{thm}

% Stackrel
\usepackage{scalerel,stackengine}
\stackMath
\newcommand\reallywidehat[1]{%
\savestack{\tmpbox}{\stretchto{%
  \scaleto{%
    \scalerel*[\widthof{\ensuremath{#1}}]{\kern-.6pt\bigwedge\kern-.6pt}%
    {\rule[-\textheight/2]{1ex}{\textheight}}%WIDTH-LIMITED BIG WEDGE
  }{\textheight}%
}{0.5ex}}%
\stackon[1pt]{#1}{\tmpbox}%
}



\pagestyle{fancy}
\fancyhf{}
\rhead{Yuefeng Pan}
\lhead{Notes Theme}
\cfoot{\thepage}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\baselinestretch}{1.2}
\renewcommand{\labelitemi}{$\circ$}
\title{Title}
\author{author}
\begin{document}
\maketitle

\end{document}


endsnippet

snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet
# }}}1
# Greek symbols {{{1
snippet ;G "Gamma" iA
\Gamma
endsnippet

snippet ;D "Delta" iA
\Delta
endsnippet

snippet ;L "Lambda" iA
\Lambda
endsnippet

snippet ;F "Phi" iA
\Phi
endsnippet

snippet ;P "Pi" iA
\Pi
endsnippet

snippet ;C "Psi" iA
\Psi
endsnippet

snippet ;S "Sigma" iA
\Sigma
endsnippet

snippet ;U "Theta" iA
\Theta
endsnippet

snippet ;Y "Upsilon" iA
\Upsilon
endsnippet

snippet ;J "Xi" iA
\Xi
endsnippet

snippet ;O "Omega" iA
\Omega
endsnippet

snippet ;a "alpha" iA
\alpha
endsnippet

snippet ;b "beta" iA
\beta
endsnippet

snippet ;g "gamma" iA
\gamma
endsnippet

snippet ;d "delta" iA
\delta
endsnippet

snippet ;e "epsilon" iA
\epsilon
endsnippet

snippet ;z "zeta" iA
\zeta
endsnippet

snippet ;h "eta" iA
\eta
endsnippet

context "math()"
snippet ;u "theta" iA
\theta
endsnippet

snippet ;i "iota" iA
\iota
endsnippet

snippet ;k "kappa" iA
\kappa
endsnippet

snippet ;l "lambda" iA
\lambda
endsnippet

snippet ;m "mu" iA
\mu
endsnippet

snippet ;n "nu" iA
\nu
endsnippet

snippet ;j "xi" iA
\xi
endsnippet

snippet ;p "pi" iA
\pi
endsnippet

snippet ;r "rho" iA
\rho
endsnippet

snippet ;s "sigma" iA
\sigma
endsnippet

snippet ;t "tau" iA
\tau
endsnippet

snippet ;y "upsilon" iA
\upsilon
endsnippet

snippet ;f "phi" iA
\phi
endsnippet

snippet ;x "chi" iA
\chi
endsnippet

snippet ;c "psi" iA
\psi
endsnippet

snippet ;o "omega" iA
\omega
endsnippet

snippet ;dg "digamma" iA
\digamma
endsnippet

snippet ;ve "varepsilon" iA
\varepsilon
endsnippet

snippet ;vf "varphi" iA
\varphi
endsnippet

snippet ;vp "varpi" iA
\varpi
endsnippet

snippet ;vr "varrho" iA
\varrho
endsnippet

snippet ;vs "varsigma" iA
\varsigma
endsnippet

snippet ;vu "vartheta" iA
\vartheta
endsnippet
# }}}1
# Environments {{{1

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

# ${1:${VISUAL}}
snippet ali "Align" bA
\begin{align*}
	$1
.\end{align*}$0
endsnippet


snippet pmat "pmat" i
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" i
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

# }}}1
# add bar/tilde/hat/... to characters {{{1
priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])til" "tilde" riA
\tilde{`!p snip.rv=match.group(1)`}$0
endsnippet

priority 10
context "math()"
snippet "til" "tilde" riA
\tilde{$1}$0
endsnippet


# }}}1
# different fonts {{{1
context "math()"
snippet tt "text" wA
\text{${1:${VISUAL}}}$0
endsnippet


snippet tbf "boldface text" wA
\textbf{${1:${VISUAL}}}$0
endsnippet


snippet tit "italic text" wA
\textit{${1:${VISUAL}}}$0
endsnippet

snippet mrm "roman font in math mode" wA
\mathrm{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet "([a-zA-Z])tbf" "boldface text with var" riA
\textbf{`!p snip.rv=match.group(1)`}$0
endsnippet

context "math()"
snippet "([a-zA-Z])scr" "mathscr" riA
\mathscr{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([a-zA-Z])cal" "mathcal" riA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "([a-zA-Z])dot" "dotted var" riA
\dot{`!p snip.rv=match.group(1)`}$0
endsnippet

# }}}1
# to the power/sub,upscript/{{{1
priority 10
context "math()"
snippet '([A-Za-z])(\d)' "auto number subscript" riA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

priority 10
context "math()"
snippet '([A-Za-z])_(\d\d)' "auto number subscript2" riA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

priority 10
context "math()"
snippet "([a-zA-Z])([a-z])\2" "short for alphabet subscript" rwA
`!p snip.rv=match.group(1)`_{`!p snip.rv=match.group(2)`}
endsnippet

# context "math()"
# snippet '(?<!i)sts' "text subscript" irA
# _\text{$1} $0
# endsnippet

context "math()"
snippet sq "squared root" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet TT "transpose" iA
^{T}
endsnippet

context "math()"
snippet tiv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet tih "inverse" iA
^{-\frac{1}{2}}
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet


context "math()"
snippet tj "subscript" riA
_{$1}
endsnippet

context "math()"
snippet rj "to the ... power" iA
_{($1)}$0
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

# }}}1
# symbols {{{1


# parenthesis {{{2
context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

priority 100
snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

priority 100
snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

priority 100
snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

priority 100
snippet lra "leftangle rightangle" i
\left<${1:${VISUAL}} \right>$0
endsnippet

# }}}2

# about general terms {{{2
snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

priority 300
context "math()"
snippet dint "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet


snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

# }}}2
# set operations {{{2
context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in $0
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I} }} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I} }} $0
endsnippet
# }}}2

# Miscellous {{{2
context "math()"
snippet := "coloneq" iA
\coloneq
endsnippet
context "math()"
priority 100
snippet ... "ldots" iA
\ldots
endsnippet

context "math()"
snippet Ex "Expectation" wi
\mathbb{E}\left[ $1 \right]$0
endsnippet

snippet CC "C" iA
\C
endsnippet
snippet OO "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet
snippet FF "F" iA
\F
endsnippet
snippet NN "N" iA
\N
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xxx "cross" iA
\times 
endsnippet

snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

snippet == "equals" iA
=& $1 \\\\
endsnippet

snippet ++ "add" iA
+& $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

# }}}2


# }}}1
# fractions {{{1
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

# }}}1
# object fast generator {{{1
priority 100
context "math()"
snippet "cov([a-zA-Z][a-zA-Z])" "covariance matrix" riA
\Sigma_{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "ecov([a-zA-Z][a-zA-Z])" "empirical covariance matrix" riA
\hat{\Sigma}_{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "s([a-zA-Z])\.(\d+)([a-zA-Z])" "short for sum" rw
\sum_{`!p snip.rv=match.group(1)`=`!p snip.rv=match.group(2)`}^{`!p snip.rv=match.group(3)`}
endsnippet

priority 10
context "math()"
snippet "p([a-zA-Z])\.(\d+)([a-zA-Z])" "short for product" rw
\prod{`!p snip.rv=match.group(1)`=`!p snip.rv=match.group(2)`}^{`!p snip.rv=match.group(3)`}
endsnippet
# }}}1
# by castel, no use for now {{{1
snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

# snippet nn "Tikz node" w
# \node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
# $0
# endsnippet


# snippet lll "l" iA
# \ell
# endsnippet

#---------------------
# Snippets below are for matrix.
global !p
def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"

        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)

endglobal

priority 1000
pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat(rix)?\\(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

# }}}1
